#! /usr/bin/env node

/**
 * Frodo.js is a generator for Express aplications.
 * Easily set structure in json file and pass path for the file as command line argument
 */

var fs = require('fs'),
    /* path is actively used, so I made Python like name */
    os = {path: require('path')},
    pluralize = require('./pluralize');


var $WORKING_DIR = process.cwd(),
    $SKIP_VIEWS = false,
    $SKIP_ASSETS = false,
    $APP = os.path.join($WORKING_DIR, 'app'),
    $ASSETS = os.path.join($APP, 'assets'),
    $CONTROLLERS = os.path.join($APP, 'controllers'),
    $MODELS = os.path.join($APP, 'models');
    $VIEWS = os.path.join($APP, 'views'),
    $PREPROCESSORS = {
      views: 'jade',
      stylesheets: 'css',
      javascripts: 'js'
    };


var skipViewsItems = ['assets', 'views', 'vendor', 'public'];


var skeleton = {
  files: ['index.js', '.gitignore'],
  app: {
    assets: {
      images: {files: ['.keep']},
      javascripts: {files: ['application.js']},
      stylesheets: {files: ['application.css']}
    },
    controllers: {files: ['.keep']},
    models: {files: ['.keep']},
    views: {
      layouts: {files: ['application.jade']}
    },
    helpers: {files: ['.keep']}
  },
  bin: {files: ['.keep']},
  config: {
    environments: {files: ['development.js', 'test.js', 'production.js']},
    files: ['application.js', 'environment.js', 'database.js', 'routes.js']
  },
  db: {files: ['.keep']},
  lib: {files: ['.keep']},
  log: {files: ['.keep']},
  public: {
    files: ['404.jade', '500.jade', 'favicon.ico', 'robots.txt']
  },
  test: {
    controllers: {files: ['.keep']},
    models: {files: ['.keep']},
    helpers: {files: ['.keep']}
  },
  tmp: {files: ['.keep']},
  vendor: {
    javascripts: {files: ['application.js']},
    stylesheets: {files: ['application.css']}
  }
};


function createFile(path) {
  console.log('Creating file', path);
  fs.closeSync(fs.openSync(path, 'w'));
}


function createFiles(files, path) {
  var file = null;

  for (var i = 0; i < files.length; i++) {
    file = files[i];
    createFile(os.path.join(path, file));
  }
}


/**
 * Checks if argument is object
 *
 * @method isObject
 * @param {Any} obj value to be checked
 * @return Boolean
 */
function isObject(obj) {
  return Object.prototype.toString.call(obj) === '[object Object]';
}


/**
 * Generates project folders structure
 */
function generateSkeleton(skeleton, path) {
  for (key in skeleton) {
    if (skeleton.hasOwnProperty(key)) {
      if ($SKIP_VIEWS && skipViewsItems.indexOf(key) >= 0) {
        continue;
      }

      if (isObject(skeleton[key])) {
        console.log('Creating folder', os.path.join(path, key));
        fs.mkdirSync(os.path.join(path, key));
        generateSkeleton(skeleton[key], os.path.join(path, key));
      } else if (key === 'files') {
        createFiles(skeleton.files, path);
      }
    }
  }
}


/**
 * Generates a new controller. If $SKIP_VIEWS is false, generateViews will be executed.
 * Views folder name is first argument of the generateController function, views names the same as
 * methods.
 *
 * ! For now routes would not be generated automatically. This feature is on the road map
 *
 * @method generateController
 * @param {String} name controller name
 * @param {Array} methods a list of methods to be added to the controller
 */
function generateController(name, methods) {
  var name = pluralize(name),
      fullName = name+'_controller.js';

  createFile(os.path.join($CONTROLLERS, fullName));

  if (!$SKIP_VIEWS && methods) {
    generateViews(name, methods);
  }

  if (!$SKIP_ASSETS) {
    generateAssets(name);
  }
}


/**
 * Generates javascript and stylesheet files.
 *
 * @method generateAssets
 *
 * @param {String} name name of file as is.
 */
function generateAssets(name) {
  var js = os.path.join($ASSETS, 'javascripts', name+'.'+$PREPROCESSORS.javascripts),
      css = os.path.join($ASSETS, 'stylesheets', name+'.'+$PREPROCESSORS.stylesheets);

  createFile(js);
  createFile(css);
}


/**
 * Generates new views
 *
 * @method generateViews
 * @param {String} dirName a directory for new views
 * @param {Array} methods a list of views to be generated
 */
function generateViews(dirName, views) {
  var viewsPath = os.path.join($VIEWS, dirName),
      view = null;

  /* If views directory does not exist - create it */
  if (!fs.existsSync(viewsPath)) {
    fs.mkdirSync(viewsPath);
  }

  for (var i = 0; i < views.length; i++) {
    view = views[i]+'.'+$PREPROCESSORS.views;
    createFile(os.path.join(viewsPath, view));
  }
}


/**
 * Generates a new model
 *
 * @method generateModel
 *
 * @param {String} name model name
 * @prop {Array} props an array of properties. A property of collon seperated strings.
 * propName:propType:required:defaultValue. Example: login:string:required,
 * created_at:date:required:now
 *
 */
function generateModel(name, props) {
  createFile(os.path.join($MODELS, name+'.js'));
}


/**
 * Use your favorite preprocessors with frodo generators. In order to configure preprocessors
 * add module.exports.preprocessors into config/application. If preprocessors are not set frodo
 * will use default values: jade for views, css for stylesheets, js for scripts. If any value is
 * missed, frodo will use default for this as well.
 *
 * /!\ This settigns do not set your assets pipeline. Such a feature is on the roadmap. Don't forget
 * to set preprocessing of your assets.
 *
 * Example ('config/application.js'):
 *  module.exports.preprocessors = {
 *    views: 'jade',
 *    stylesheets: 'scss',
 *    javascripts: 'coffee'
 *  }
 */
function setPreprocessors() {
  var preprocessors = require(os.path.join($WORKING_DIR, 'config/application')).preprocessors;

  if (!preprocessors) {
    return;
  } else {
    if (preprocessors.views) {
      $PREPROCESSORS.views = preprocessors.views;
    }

    if (preprocessors.stylesheets) {
      $PREPROCESSORS.stylesheets = preprocessors.stylesheets;
    }

    if (preprocessors.javascripts) {
      $PREPROCESSORS.javascripts = preprocessors.javascripts;
    }
  }
}

/**
 * Parses command line arguments and if they are correct, call required action.
 *
 * @method main
 */
function main() {
  var argv = process.argv;

  setPreprocessors();

  if (argv.length === 2) {
    console.log('too few arguments');
    return;
  } else if (argv[2] === 'new') {
    if (argv.length === 3) {
      console.log('Usage: frodo new project_name. Example: frodo new blog');
    } else {
      var projectPath = os.path.join($WORKING_DIR, argv[3]);
      fs.mkdirSync(projectPath);

      if (argv.indexOf('--skipViews') >= 0) {
        $SKIP_VIEWS = true;
      }

      generateSkeleton(skeleton, projectPath);
    }
  } else if (argv[2] === 'generate') {
    if  (argv.length < 5) {
      console.log('Usage: frodo generate controller controller_name.'+
                  'Example: frodo generate controller users');
      return;
    }
    if (argv[3] === 'controller') {
      generateController(argv[4], argv.slice(5));
    } else if (argv[3] === 'model') {
      generateModel(argv[4], argv.slice(5));
    } else if (argv[3] === 'scaffold') {
      generateController(argv[4], ['index', 'show', 'create', 'new', 'edit', 'delete', ]);
      generateModel(argv[4], argv.slice(5));
    }
  }
}


main();
